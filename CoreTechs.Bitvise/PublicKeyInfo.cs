using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Linq;

namespace CoreTechs.Bitvise
{
    public class PublicKeyInfo
    {
        protected string Algorithm { get; set; }
        protected int Size { get; set; }
        protected string Comment { get; set; }
        protected string MD5 { get; set; }


        /// <summary>
        ///  Regular expression built for C# on: Wed, Feb 6, 2013, 11:42:37 AM
        ///  Using Expresso Version: 3.0.4334, http://www.ultrapico.com
        ///  
        ///  A description of the regular expression:
        ///  
        ///  Key 
        ///      Key
        ///      Space
        ///  [keynum]: A named capture group. [\d+]
        ///      Any digit, one or more repetitions
        ///  , Algorithm: 
        ///      ,
        ///      Space
        ///      Algorithm:
        ///      Space
        ///  [alg]: A named capture group. [.+]
        ///      Any character, one or more repetitions
        ///  , Size: 
        ///      ,
        ///      Space
        ///      Size:
        ///      Space
        ///  [size]: A named capture group. [\d+]
        ///      Any digit, one or more repetitions
        ///  \s+MD5: 
        ///      Whitespace, one or more repetitions
        ///      MD5:
        ///      Space
        ///  [md5]: A named capture group. [[a-zA-Z0-9:]+]
        ///      Any character in this class: [a-zA-Z0-9:], one or more repetitions
        ///  Match expression but don't capture it. [\s|.], one or more repetitions, as few as possible
        ///      Select from 2 alternatives
        ///          Whitespace
        ///          Any character
        ///  Comment: 
        ///      Comment:
        ///      Space
        ///  [comment]: A named capture group. [.+]
        ///      Any character, one or more repetitions
        ///  Carriage return
        ///  
        ///
        /// </summary>
        public static Regex PubKeyRegex = new Regex(
            @"Key (?<keynum>\d+), Algorithm: (?<alg>.+), Size: (?<size>\d+)\s+MD5: (?<md5>[a-zA-Z0-9:]+)(?:\s|.)+?Comment: (?<comment>.+)\r",
            RegexOptions.Multiline | RegexOptions.Compiled);


        public static IEnumerable<PublicKeyInfo> ParseKeyData(string publicKeyData)
        {
            /* 
             
              sample publicKeyData:
             
                    Key 0, Algorithm: ssh-rsa, Size: 2048
                      MD5: 1a:cc:3b:53:59:2a:b8:79:a2:a9:4a:e3:c5:04:b8:a6
                      B-B: xohin-pucok-munir-vegev-vogaz-racak-dupaz-gagut-kogut-cahar-kaxux
                      Insert time: 2013-01-29T22:20:22Z
                      Comment: Generated by roverby@CT-ROVERBY-PC.
                    Key 1, Algorithm: ssh-rsa, Size: 1024
                      MD5: 43:7d:65:61:94:89:1d:c9:b6:df:c1:3a:b4:7c:7c:40
                      B-B: xered-dodik-zybug-zakov-legac-licah-bezih-gokik-bahyc-hozod-nexux
                      Insert time: 2013-01-29T22:20:26Z
                      Comment: "rsa-key-20130129"
                    Key 2, Algorithm: ssh-rsa, Size: 1024
                      MD5: cf:27:a8:6c:b1:01:18:fb:89:10:1c:2f:e0:e2:a1:33
                      B-B: xidap-cydul-pivut-cycyb-sezeb-zydyz-lepap-mylaf-nuvoc-kepyc-raxax
                      Insert time: 2013-01-30T01:51:27Z
                      Comment: "rsa-key-20130129"

             */

            var matches = PubKeyRegex.Matches(publicKeyData);
            return matches.Cast<Match>().Select(match => new PublicKeyInfo
                                                             {
                                                                 Algorithm = match.Groups["alg"].Value,
                                                                 Size = int.Parse(match.Groups["size"].Value),
                                                                 MD5 = match.Groups["md5"].Value,
                                                                 Comment = match.Groups["comment"].Value
                                                             });
        }

    }
}
